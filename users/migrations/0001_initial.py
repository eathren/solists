# Generated by Django 3.1.2 on 2020-10-20 00:14

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import django_countries.fields
import multiselectfield.db.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('published', models.BooleanField(default=False)),
                ('developer', models.BooleanField(default=False)),
                ('designer', models.BooleanField(default=False)),
                ('description', models.TextField(blank=True)),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('job_type', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('Full-time', 'Full-time'), ('Part-time', 'Part-time'), ('Contract', 'Contract'), ('Internship', 'Internship')], max_length=200)),
                ('experience', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('Junior', 'Junior'), ('Intermediate', 'Intermediate'), ('Senior', 'Senior'), ('Intern', 'Intern')], max_length=200)),
                ('skills', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('Agile', 'Agile'), ('Amazon Web Services', 'Amazon Web Services'), ('AngularJS', 'AngularJS'), ('Ansible', 'Ansible'), ('AI', 'AI'), ('Apache', 'Apache'), ('Artificial Intelligence', 'Artificial Intelligence'), ('Backbone.js', 'Backbone.js'), ('Backend Development', 'Backend Development'), ('Big Data', 'Big Data'), ('Blockchain', 'Blockchain'), ('Objective-C', 'Objective-C'), ('C#', 'C#'), ('C++', 'C++'), ('Celery', 'Celery'), ('CouchDB', 'CouchDB'), ('CSS3', 'CSS3'), ('Cryptocurrency', 'Cryptocurrency'), ('DevOps', 'DevOps'), ('Docker', 'Docker'), ('Django ', 'Django '), ('Django Rest Framework', 'Django Rest Framework'), ('Docker', 'Docker'), ('Elasticsearch', 'Elasticsearch'), ('Ember.js', 'Ember.js'), ('Fabric', 'Fabric'), ('Flask', 'Flask'), ('Frontend Development', 'Frontend Development'), ('Fullstack Development', 'Fullstack Development'), ('Gatsby.js', 'Gatsby.js'), ('Git', 'Git'), ('Google Cloud Platform', 'Google Cloud Platform'), ('GraphQL', 'GraphQL'), ('Gunicorn', 'Gunicorn'), ('Hadoop', 'Hadoop'), ('Heroku', 'Heroku'), ('Hugo', 'Hugo'), ('Java', 'Java'), ('JavaScript', 'JavaScript'), ('Jenkins', 'Jenkins'), ('jQuery', 'jQuery'), ('Kafka', 'Kafka'), ('Kotlin', 'Kotlin'), ('Kubernetes', 'Kubernetes'), ('Linux', 'Linux'), ('Machine Learning', 'Machine Learning'), ('Matplotlib', 'Matplotlib'), ('Memcached', 'Memcached'), ('Mercurial', 'Mercurial'), ('Microsoft Azure', 'Microsoft Azure'), ('MongoDB', 'MongoDB'), ('Natural Language Processing', 'Natural Language Processing'), ('.NET', '.NET'), ('Nginx', 'Nginx'), ('NumPy', 'NumPy'), ('Pandas', 'Pandas'), ('PostegreSQL', 'PostegreSQL'), ('PyQt', 'PyQt'), ('Pyramid', 'Pyramid'), ('PySide', 'PySide'), ('Python', 'Python'), ('PyTorch', 'PyTorch'), ('RabbitMQ', 'RabbitMQ'), ('Redis', 'Redis'), ('React.js', 'React.js'), ('React Native', 'React Native'), ('REST', 'REST'), ('SaltStack', 'SaltStack'), ('Sass', 'Sass'), ('Scala', 'Scala'), ('SciPy', 'SciPy'), ('Scrapy', 'Scrapy'), ('Scrum', 'Scrum'), ('Security', 'Security'), ('Selenium', 'Selenium'), ('Solr', 'Solr'), ('Spark', 'Spark'), ('SQL', 'SQL'), ('SQLAlchemy', 'SQLAlchemy'), ('Swift', 'Swift'), ('TensorFlow', 'TensorFlow'), ('Terraform', 'Terraform'), ('Test-Driven Development', 'Test-Driven Development'), ('Tornado', 'Tornado'), ('TypeScript', 'TypeScript'), ('UI', 'UI'), ('uWSGI', 'uWSGI'), ('UX', 'UX'), ('Vagrant', 'Vagrant'), ('Virtualenv', 'Virtualenv'), ('VR', 'VR'), ('Visualization', 'Visualization'), ('Vue.js', 'Vue.js'), ('Web Development', 'Web Development'), ('Web Scraping', 'Web Scraping')], max_length=1000)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['id'], name='user_id_index'),
        ),
    ]
